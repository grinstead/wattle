'use strict';const e=new Map;let h=null;function k(a){const b=h,c=[];h=c;let f=!1;try{const d=a();if(null==d||"object"!==typeof d)throw Error("buildCleanable given non-object result");const g=e.get(d);e.set(d,g?g.concat(c):c);f=!0;return d}finally{h=b,f||c.forEach(d=>{try{d()}catch(g){console.error(g)}})}}function l(a){if(h)h.push(a);else throw Error("onCleanUp called outside of runAndCleanOnError call");};const m=new Float32Array(16);function n(a){let b=a.a;if(!b){var c=p;if(!c)throw Error("ProgramInput.set called without any program rendering");if(!c.b.has(a))throw Error("ProgramInput.set called during a different program");b=c.c;var f=b.getUniformLocation(c.a,a.f);if(null==f)throw Error(`No Uniform Variable ${a.f} within ${c.name}`);a.a=b;a.b=f;q(()=>{a.a=null;a.b=null})}}class r{constructor(a){this.b=this.a=null;this.f=a}}
class t extends r{set(a,b,c,f,d,g,w,x,y,z,A,B,C,D,E,F){m[0]=a;m[1]=b;m[2]=c;m[3]=f;m[4]=d;m[5]=g;m[6]=w;m[7]=x;m[8]=y;m[9]=z;m[10]=A;m[11]=B;m[12]=C;m[13]=D;m[14]=E;m[15]=F;n(this);this.a.uniformMatrix4fv(this.b,!1,m)}};let p=null,u=null;class v{constructor(a,b,c,f){this.name=a;this.c=b;this.inputs=f;this.b=new Set(Object.values(f));this.a=c}}function G(a,b){if(p)throw Error("renderInProgram called during another renderInProgram");const c=a.c;c.useProgram(a.a);p=a;let f=!0;try{b(c),f=!1}finally{u&&(a=u,u=null,a.forEach(d=>{try{d(f)}catch(g){console.log(g)}})),p=null}}function q(a){if(!p)throw Error("onRenderComplete called outside of renderInProgram");u?u.push(a):u=[a]}
function H(a){return k(()=>{const b=a.c;var c=a.i;const f=I(b,b.createShader(b.VERTEX_SHADER),c.j);c=I(b,b.createShader(b.FRAGMENT_SHADER),c.g);const d=b.createProgram();l(()=>void b.deleteProgram(d));b.attachShader(d,f);b.attachShader(d,c);b.linkProgram(d);if(!b.getProgramParameter(d,b.LINK_STATUS))throw Error(`Failed to link ${a.name} program: ${b.getProgramInfoLog(d)}`);return new v(a.name,b,d,a.inputs)})}
function I(a,b,c){a.shaderSource(b,c.code);l(()=>void a.deleteShader(b));a.compileShader(b);if(!a.getShaderParameter(b,a.COMPILE_STATUS))throw Error(`Failed to compile ${c.name}: ${a.getShaderInfoLog(b)}`);return b};window.onload=function(){var a=document.getElementById("canvas");a=(a instanceof HTMLCanvasElement?a:null).getContext("webgl2");const b=H({name:"main",c:a,inputs:{h:new t("u_projection")},i:{j:{name:"vertex",code:"#version 300 es\nin vec3 a_position;\nin vec2 a_texturePosition;\nuniform mat4 u_projection;\n\nout vec2 v_texturePosition;\n\nvoid main() {\n  gl_Position = u_projection * vec4(a_position, 1);\n  v_texturePosition = a_texturePosition;\n}"},g:{name:"fragment",code:"#version 300 es\nprecision highp float;\n\nuniform sampler2D u_texture;\n\nin vec2 v_texturePosition;\nout vec4 output_color;\n\nvoid main() {\n    vec4 color = texture(u_texture, v_texturePosition.st);\n    if (color.a == 0.0) {\n        discard;\n    }\n    output_color = color;\n}"}}});
G(b,()=>{b.inputs.h.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)});console.log("hi",b)};
